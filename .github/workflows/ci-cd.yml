name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  DOCKER_IMAGE: basuruyasaruwan/flask-crud

jobs:
  build-test:
    name: üß™ Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        
    - name: Run tests
      run: |
        python -m pytest tests/ -v || echo "No tests found, skipping..."

  docker-build:
    name: üê≥ Build and Push Docker Image
    needs: build-test
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy-staging:
    name: üöÄ Deploy to Staging
    needs: docker-build
    if: github.ref == 'refs/heads/develop'
    runs-on: self-hosted
    
    steps:
    - name: Clean up previous deployment
      run: |
        docker stop crud-app-staging || true
        docker rm crud-app-staging || true
        docker image prune -f --filter "dangling=true"
        
    - name: Pull and deploy staging
      run: |
        docker pull ${{ env.DOCKER_IMAGE }}:develop
        docker run -d \
          --name crud-app-staging \
          -p 5001:5000 \
          --restart unless-stopped \
          ${{ env.DOCKER_IMAGE }}:develop
          
    - name: Verify deployment
      run: |
        sleep 10
        docker ps | grep crud-app-staging
        curl -f http://localhost:5001/health || echo "Health check endpoint not available"

  deploy-production:
    name: üöÄ Deploy to Production
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    runs-on: self-hosted
    
    steps:
    - name: Clean up previous deployment
      run: |
        docker stop crud-app-prod || true
        docker rm crud-app-prod || true
        docker image prune -f --filter "dangling=true"
        
    - name: Pull and deploy production
      run: |
        docker pull ${{ env.DOCKER_IMAGE }}:latest
        docker run -d \
          --name crud-app-prod \
          -p 5000:5000 \
          --restart unless-stopped \
          ${{ env.DOCKER_IMAGE }}:latest
          
    - name: Verify deployment
      run: |
        sleep 10
        docker ps | grep crud-app-prod
        curl -f http://localhost:5000/health || echo "Health check endpoint not available"
        
    - name: Clean up old images
      run: |
        docker image prune -f --filter "dangling=true"